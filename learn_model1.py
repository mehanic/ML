from transformers import (
    TrainingArguments,
    Wav2Vec2ForCTC,
    Trainer,
    Wav2Vec2Processor,
)
from datasets import load_from_disk
import torch
import transformers
import inspect
import gc
from dataclasses import dataclass
from typing import List, Dict, Union

print("Transformers version:", transformers.__version__)
print("TrainingArguments file path:", inspect.getfile(TrainingArguments))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
dataset = load_from_disk("data/arabic_prepared")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
processor = Wav2Vec2Processor.from_pretrained(
    "jonatasgrosman/wav2vec2-large-xlsr-53-arabic"
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = Wav2Vec2ForCTC.from_pretrained(
    "jonatasgrosman/wav2vec2-large-xlsr-53-arabic",
    ctc_loss_reduction="mean",
    pad_token_id=processor.tokenizer.pad_token_id,
)

# –ó–∞–º–æ—Ä–æ–∑–∫–∞ feature extractor –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ gradient checkpointing (–µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–æ)
model.freeze_feature_encoder()
# model.gradient_checkpointing_enable()  # –ù–∞ CPU —ç—Ç–æ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–¥–ª—è—Ç—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è CPU
training_args = TrainingArguments(
    output_dir="checkpoints",
    group_by_length=True,
    per_device_train_batch_size=1,
    gradient_accumulation_steps=4,
    eval_strategy="no",
    num_train_epochs=3,
    fp16=False,  # üí• –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è GPU
    no_cuda=True,  # üí• –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ ‚Äî –æ—Ç–∫–ª—é—á–∞–µ—Ç GPU
    logging_steps=10,
    save_steps=500,
    save_total_limit=2,
    learning_rate=3e-4,
    warmup_steps=500,
)


# –ö–∞—Å—Ç–æ–º–Ω—ã–π Data Collator
@dataclass
class DataCollatorCTCWithPaddingCustom:
    processor: Wav2Vec2Processor
    padding: bool = True

    def __call__(
        self, features: List[Dict[str, Union[List[float], torch.Tensor]]]
    ) -> Dict[str, torch.Tensor]:
        input_values = [f["input_values"] for f in features]
        labels = [f["labels"] for f in features]

        batch = self.processor.pad(
            {"input_values": input_values}, padding=self.padding, return_tensors="pt"
        )

        cleaned_labels = []
        for label in labels:
            if isinstance(label, torch.Tensor):
                label = label.tolist()
            elif isinstance(label, int):
                label = [label]
            cleaned_labels.append(label)

        max_label_len = max(len(label) for label in cleaned_labels)
        padded_labels = [
            label + [-100] * (max_label_len - len(label)) for label in cleaned_labels
        ]
        batch["labels"] = torch.tensor(padded_labels, dtype=torch.long)
        return batch


# –°–æ–∑–¥–∞–µ–º collator
data_collator = DataCollatorCTCWithPaddingCustom(processor=processor, padding=True)

# –°–æ–∑–¥–∞–µ–º Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=dataset,
    tokenizer=processor,
    data_collator=data_collator,
)

# –°—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è
print("Starting training on CPU...")
try:
    trainer.train()
finally:
    gc.collect()
